generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  WORKER
  CITIZEN
}

enum QuestionType {
  MCQ
  SUBJECTIVE
}

// ========================
// User Model
// ========================
model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  phone     String   @unique
  password  String 
  age       Int?
  gender    String?
  role      Role     @default(CITIZEN)
  totalXp   Int      @default(0)
  createdAt DateTime @default(now())

  moduleProgress    UserModuleProgress[]
  flashcardProgress UserFlashcardProgress[]
  videoProgress     UserVideoProgress[]
  quizProgress      UserQuizProgress[]
  civicReports      CivicReport[]           // reports created by this user
  reportSupport     CivicReportSupport[]    // supports/opposes by this user
}

// ========================
// Training Models
// ========================
model TrainingModule {
  id        String   @id @default(uuid())
  title     String
  role      Role
  createdAt DateTime @default(now())
  flashcards Flashcard[]
  videos    Video[]
  quizzes   Quiz[]

  userProgress UserModuleProgress[]
}

model Flashcard {
  id        String   @id @default(uuid())
  moduleId  String
  module    TrainingModule @relation(fields: [moduleId], references: [id])
  question  String
  answer    String

  userProgress UserFlashcardProgress[]
}

model Video {
  id        String   @id @default(uuid())
  moduleId  String
  module    TrainingModule @relation(fields: [moduleId], references: [id])
  title     String
  url       String

  userProgress UserVideoProgress[]
}

model Quiz {
  id        String   @id @default(uuid())
  moduleId  String
  module    TrainingModule @relation(fields: [moduleId], references: [id])
  title     String
  questions QuizQuestion[]

  userProgress UserQuizProgress[]
}

model QuizQuestion {
  id       String   @id @default(uuid())
  quizId   String
  quiz     Quiz @relation(fields: [quizId], references: [id])
  type     QuestionType
  question String
  options  QuizOption[]
  answer   String?
}

model QuizOption {
  id         String   @id @default(uuid())
  questionId String
  question   QuizQuestion @relation(fields: [questionId], references: [id])
  text       String
  isCorrect  Boolean @default(false)
}

// ========================
// User Progress Models
// ========================
model UserModuleProgress {
  id         String   @id @default(uuid())
  userId     String
  moduleId   String
  completed  Boolean  @default(false)
  xpEarned   Int      @default(0)
  completedAt DateTime?

  user   User           @relation(fields: [userId], references: [id])
  module TrainingModule @relation(fields: [moduleId], references: [id])

  @@unique([userId, moduleId])
}

model UserFlashcardProgress {
  id         String   @id @default(uuid())
  userId     String
  flashcardId String
  mastered   Boolean  @default(false)
  xpEarned   Int      @default(0)
  completedAt DateTime?

  user      User      @relation(fields: [userId], references: [id])
  flashcard Flashcard @relation(fields: [flashcardId], references: [id])

  @@unique([userId, flashcardId])
}

model UserVideoProgress {
  id       String   @id @default(uuid())
  userId   String
  videoId  String
  watched  Boolean  @default(false)
  xpEarned Int      @default(0)
  completedAt DateTime?

  user  User   @relation(fields: [userId], references: [id])
  video Video  @relation(fields: [videoId], references: [id])

  @@unique([userId, videoId])
}

model UserQuizProgress {
  id        String   @id @default(uuid())
  userId    String
  quizId    String
  score     Int?
  accuracy  Float?
  xpEarned  Int      @default(0)
  completedAt DateTime?

  user User @relation(fields: [userId], references: [id])
  quiz Quiz @relation(fields: [quizId], references: [id])

  @@unique([userId, quizId])
}

// ========================
// Civic Reporting Models
// ========================
model CivicReport {
  id              String       @id @default(uuid())
  title           String
  description     String
  type            ReportType
  imageUrl        String?
  latitude        Float
  longitude       Float
  createdById     String
  supportCount    Int          @default(0)
  oppositionCount Int          @default(0)
  status          ReportStatus @default(pending)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  createdBy       User @relation(fields: [createdById], references: [id])
  supports        CivicReportSupport[]
}

model CivicReportSupport {
  id        String @id @default(uuid())
  reportId  String
  userId    String
  support   Boolean // true = support, false = oppose
  createdAt DateTime @default(now())

  report CivicReport @relation(fields: [reportId], references: [id])
  user   User        @relation(fields: [userId], references: [id])

  @@unique([reportId, userId])
}

enum ReportType {
  illegal_dumping
  open_toilet
  dirty_toilet
  overflow_dustbin
  dead_animal
  fowl
  public_bin_request
  public_toilet_request
}

enum ReportStatus {
  pending
  escalated
  resolved
}

